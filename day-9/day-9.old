#                                         --- Day 9: Rope Bridge ---
# This rope bridge creaks as you walk along it. You aren't sure how old it is, or whether
# it can even support your weight.
#
# It seems to support the Elves just fine, though. The bridge spans a gorge which was carved out by the massive river
# far below you.
#
# You step carefully; as you do, the ropes stretch and twist. You decide to distract yourself by modeling rope
# physics; maybe you can even figure out where not to step.
#
# Consider a rope with a knot at each end; these knots mark the head and the tail of the rope. If the head moves far
# enough away from the tail, the tail is pulled toward the head.
#
# Due to nebulous reasoning involving Planck lengths, you should be able to model the positions of the knots on a
# two-dimensional grid. Then, by following a hypothetical series of motions (your puzzle input) for the head,
# you can determine how the tail will move.
#
# Due to the aforementioned Planck lengths, the rope must be quite short; in fact, the head (H) and tail (T) must
# always be touching (diagonally adjacent and even overlapping both count as touching) If the head is ever two steps
# directly up, down, left, or right from the tail, the tail must also move one step in that direction so it remains
# close enough Otherwise, if the head and tail aren't touching and aren't in the same row or column, the tail always
# moves one step diagonally to keep up You just need to work out where the tail goes as the head follows a series of
# motions. Assume the head and the tail both start at the same position, overlapping.
# After simulating the rope, you can count up all of the positions the tail visited at least once.
import math

DOWN = 'D'
UP = 'U'
LEFT = 'L'
RIGHT = 'R'


def parse_movements():
    input_file = open('input.txt', 'r')
    return [(line[0], int(line[2])) for line in input_file.readlines()]


def sign(x):
    return int(x / abs(x))


def valid_tail_pos(head_pos, tail_pos):
    hx, hy = head_pos
    tx, ty = tail_pos

    if abs(hx - tx) >= 2 or abs(hy-ty) >= 2:
        return False

    if hx != tx and hy != ty and (abs(hx - tx) > 1 or abs(hy-ty) > 1):
        return False

    return True


def move_head(head_pos, tail_pos, move):
    tail_history = set()

    for _ in range(move[1]):
        if move[0] == 'U':
            head_pos = (head_pos[0], head_pos[1] - 1)
        elif move[0] == 'D':
            head_pos = (head_pos[0], head_pos[1] + 1)
        elif head_pos == 'L':
            head_pos = (head_pos[0] - 1, head_pos[1])
        elif head_pos == 'R':
            head_pos = (head_pos[0] + 1, head_pos[1])

        if not valid_tail_pos(head_pos, tail_pos):
            hx, hy = head_pos
            tx, ty = tail_pos

            if hx == tx and hy != ty:
                tail_pos = (tx, ty + sign(hy - ty))
            elif hy == ty and hx != tx:
                tail_pos = (tx + sign(hx - tx), ty)
            else:
                tail_pos = (tx + sign(hx - tx), ty + sign(hy - ty))

            tail_history.add(tail_pos)

    return [head_pos, tail_pos, tail_history]

# def move_head(head_pos, tail_pos, move):
#     head_pos = {
#         "D": lambda: (head_pos[0], head_pos[1] + move[1]),
#         "U": lambda: (head_pos[0], head_pos[1] - move[1]),
#         "L": lambda: (head_pos[0] - move[1], head_pos[1]),
#         "R": lambda: (head_pos[0] + move[1], head_pos[1])
#     }[move[0]]()
#
#     tail_history = set()
#
#     for _ in range(move[1]):
#         if valid_tail_pos(head_pos, tail_pos):
#             break
#
#         if head_pos[0] != tail_pos[0]:
#             tail_pos = (tail_pos[0] + sign(head_pos[0] - tail_pos[0]), tail_pos[1])
#
#         if head_pos[1] != tail_pos[1]:
#             tail_pos = (tail_pos[0], tail_pos[1] + sign(head_pos[1] - tail_pos[1]))
#
#         tail_history.add(tail_pos)
#
#     print('move: ' + str(move) + ' h: ' + str(head_pos) + ' t: ' + str(tail_pos) + ' history for move: ' + str(tail_history))
#
#     return [head_pos, tail_pos, tail_history]


# Simulate your complete hypothetical series of motions. How many positions does the tail of the rope visit at least
# once?
def get_unique_positions():
    moves = parse_movements()

    head_pos = (50, 50)
    tail_pos = (50, 50)
    tail_history = {tail_pos}

    for move in moves:
        result = move_head(head_pos, tail_pos, move)
        head_pos = result[0]
        tail_pos = result[1]
        tail_history = tail_history.union(result[2])

    return len(tail_history)

print(get_unique_positions())

